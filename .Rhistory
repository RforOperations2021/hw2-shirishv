prop.holiday = round(sum(as.numeric(as.character(holiday)))/sum(as.numeric(as.character(completed))), 2),
visit.frequency = round(mean(days.since.last.visit), 2),
purchase.frequency = round(mean(days.since.last.order), 2),
revenue = round(max(days.since.registration)/30)) %>%
filter(status == 2)
# removing mean.pages and prop.entered as they're correlated with prop.completed, and status
ltv.df <- subset(ltv.df, select = -c(status))
kable(head(ltv.df, 10))
# spliting ltv.df into train-test dataset
smp_size = floor(0.70 * nrow(ltv.df))
# removing customer id as well
ltv.df <- subset(ltv.df, select = -c(id))
ltv.df.scale <- ltv.df %>%
mutate_at(c("is.female", "mean.log.onsite", "prop.completed", "prop.holiday", "frequency"), ~(scale(.) %>% as.vector))
# spliting ltv.df into train-test dataset
smp_size = floor(0.70 * nrow(ltv.df))
# removing customer id as well
ltv.df <- subset(ltv.df, select = -c(id))
set.seed(11)
train_ind <- sample(seq_len(nrow(ltv.df)), size = smp_size)
train.df <- ltv.df[train_ind, ]
test.df <- ltv.df[-train_ind, ]
View(test.df)
# training model using randomforest
rft <- randomForest(revenue ~ ., data = train.df)
plot(rft)
rft <- randomForest(revenue ~ ., data = train.df, ntree = 85)
# predicting for test dataset
pred.rft = predict(rft, newdata = test.df[-6])
rft <- randomForest(revenue ~ ., data = train.df, ntree = 85)
# predicting for test dataset
pred.rft = predict(rft, newdata = test.df[-7])
# computing RMSE
error.rft <- pred.rft - test.df[["revenue"]]
rmse.rft <- sqrt(mean(error.rft^2))
print(rmse.rft)
# again, making a new dataframe using ltv.df for ltv prediction
ltv.df <- ltv.1 %>%
group_by(id) %>%
summarize(is.female = ifelse(max(gender) == "F", 1, 0), status = max(as.numeric(as.character(status))),
mean.log.onsite = round(mean(log.onsite), 2),
prop.completed = round(sum(as.numeric(as.character(completed)))/n(), 2),
prop.holiday = round(sum(as.numeric(as.character(holiday)))/sum(as.numeric(as.character(completed))), 2),
visit.frequency = round(mean(days.since.last.visit), 2),
purchase.frequency = round(mean(days.since.last.order), 2),
revenue = round(max(days.since.registration)/30)) %>%
filter(status == 2)
# removing mean.pages and prop.entered as they're correlated with prop.completed, and status
ltv.df <- subset(ltv.df, select = -c(status))
kable(head(ltv.df, 10))
# spliting ltv.df into train-test dataset
smp_size = floor(0.70 * nrow(ltv.df))
# removing customer id as well
ltv.df <- subset(ltv.df, select = -c(id))
set.seed(11)
train_ind <- sample(seq_len(nrow(ltv.df)), size = smp_size)
train.df <- ltv.df[train_ind, ]
test.df <- ltv.df[-train_ind, ]
# training model using randomforest
rft <- randomForest(revenue ~ ., data = train.df)
plot(rft)
rft <- randomForest(revenue ~ ., data = train.df, ntree = 85)
# predicting for test dataset
pred.rft = predict(rft, newdata = test.df[-7])
# computing RMSE
error.rft <- pred.rft - test.df[["revenue"]]
rmse.rft <- sqrt(mean(error.rft^2))
print(rmse.rft)
?mutate_if
churn <- ltv.1 %>%
group_by(id) %>%
summarize(is.female = ifelse(max(gender) == "F", 1, 0),
mean.log.onsite = round(mean(log.onsite), 2),
prop.completed = round(sum(as.numeric(as.character(completed)))/n(), 2),
prop.holiday = round(sum(as.numeric(as.character(holiday)))/sum(as.numeric(as.character(completed))), 2),
visit.frequency = round(mean(days.since.last.visit), 2),
purchase.frequency = round(mean(days.since.last.order), 2),
revenue = round(ifelse(max(as.numeric(as.character(status))) == 2, max(days.since.registration)/30,
as.Date("2013-12-31") - max(registration.date))),
registration.date = min(registration.date), max.event.date = max(date),
churn = as.factor(ifelse(max(as.numeric(as.character(status))) == 2, as.character(1), as.character(0)))) %>%
filter(registration.date < "2014-01-01" & max.event.date > "2013-12-31")
churn <- subset(churn, select = -c(registration.date, max.event.date))
kable(head(churn, 10))
churn <- ltv.1 %>%
group_by(id) %>%
summarize(is.female = ifelse(max(gender) == "F", 1, 0),
mean.log.onsite = round(mean(log.onsite), 2),
prop.completed = round(sum(as.numeric(as.character(completed)))/n(), 2),
prop.holiday = round(sum(as.numeric(as.character(holiday)))/sum(as.numeric(as.character(completed))), 2),
visit.frequency = round(mean(days.since.last.visit), 2),
purchase.frequency = round(mean(days.since.last.order), 2),
revenue = round(ifelse(max(as.numeric(as.character(status))) == 2, max(days.since.registration)/30,
(as.Date("2013-12-31") - max(registration.date))/30)),
registration.date = min(registration.date), max.event.date = max(date),
churn = as.factor(ifelse(max(as.numeric(as.character(status))) == 2, as.character(1), as.character(0)))) %>%
filter(registration.date < "2014-01-01" & max.event.date > "2013-12-31")
churn <- subset(churn, select = -c(registration.date, max.event.date))
kable(head(churn, 10))
knitr::opts_chunk$set(echo = TRUE)
sample <- read.csv("C:\Users\shiri\Downloads\Sample.csv")
sample <- read.csv("C:/Users/shiri/Downloads/Sample.csv")
rm(list = ls())
sample <- read.csv("C:/Users/shiri/Downloads/Sample.csv")
br
br()
View(sample)
sample$new.status <- ''
sample$new.status <- ''
if(sample$Autodesk.Status = 'Approved')
sample$new.status <- ''
if(sample$Autodesk.Status == 'Approved')
{
sample$new.status = 'Pass'
} ifelse(sample$Autodesk.Status == 'Request Expired (Null)' |
sample$new.status <- ''
for(a in 1:length(sample))
{
if(sample$Autodesk.Status == 'Approved')
{
sample$new.status = 'Pass'
} ifelse(sample$Autodesk.Status == 'Request Expired (Null)' |
sample$new.status <- ''
for(a in 1:length(sample))
{
if(sample$Autodesk.Status == 'Approved')
{
sample$new.status <- 'Pass'
} ifelse(sample$Autodesk.Status == 'Request Expired (Null)' |
sample$new.status <- ''
for(a in 1:length(sample))
{
if(sample$Autodesk.Status == 'Approved')
{
sample$new.status = 'Pass'
} ifelse(sample$Autodesk.Status == 'Request Expired (Null)' |
sample$new.status <- ''
for(a in 1:length(sample))
{
if (sample$Autodesk.Status == 'Approved')
{
sample$new.status = 'Pass'
} if (sample$Autodesk.Status == 'Request Expired (Null)' |
sample$new.status <- ''
for(a in 1:length(sample))
{
if (sample$Autodesk.Status == 'Approved')
{
sample$new.status = 'Pass'
}else if (sample$Autodesk.Status == 'Request Expired (Null)' |
(sample$Autodesk.Status == 'Request Expired (Fail)' & sample$Dashboard.Asset.Reviews == 0))
{
sample$new.status = 'No Action'
} else if (sample$Autodesk.Status == 'Final Fail' |
(sample$Autodesk.Status == 'Request Expired (Fail)' & sample$Dashboard.Asset.Reviews >= 1))
{
sample$new.status = 'Fail'
} else if (sample$Autodesk.Status == 'Null' | sample$Autodesk.Status == 'Fail (Attempts Remaining)')
{
sample$new.status = 'Chance to verify'
}
}
sample
unique(sample$new.status)
sample <- read.csv("C:/Users/shiri/Downloads/Sample.csv")
unique(sample$new.status)
```{r}
sample$new.status <- ''
sample$new.status <- if_else(sample$Autodesk.Status == "Approved","Pass","")
sample$new.status <- ifelse(sample$Autodesk.Status == "Approved","Pass","")
sample$new.status
sample$new.status <- if_else((sample$Autodesk.Status == 'Request Expired (Null)' ||
(sample$Autodesk.Status == 'Request Expired (Fail)' & sample$Dashboard.Asset.Reviews == 0)),"No Action","")
sample$new.status <- ifelse((sample$Autodesk.Status == 'Request Expired (Null)' ||
(sample$Autodesk.Status == 'Request Expired (Fail)' & sample$Dashboard.Asset.Reviews == 0)),"No Action","")
sample$new.status
sample$new.status <- ''
sample$new.status <- ifelse(sample$Autodesk.Status == "Approved","Pass",sample$new.status)
sample$new.status <- ifelse((sample$Autodesk.Status == 'Request Expired (Null)' ||
(sample$Autodesk.Status == 'Request Expired (Fail)' & sample$Dashboard.Asset.Reviews == 0)),"No Action",sample$new.status)
sample$new.status <- ifelse((sample$Autodesk.Status == 'Final Fail' |
(sample$Autodesk.Status == 'Request Expired (Fail)' & sample$Dashboard.Asset.Reviews >= 1)),"Fail",sample$new.status)
sample$new.status <- ifelse((sample$Autodesk.Status == 'Null' | sample$Autodesk.Status == 'Fail (Attempts Remaining)'),"Chance to Verify",sample$new.status)
unique(sample$new.status)
sample$new.status <- ''
sample$new.status <- ifelse(sample$Autodesk.Status == "Approved","Pass",sample$new.status)
sample$new.status <- ifelse((sample$Autodesk.Status == 'Request Expired (Null)' ||
(sample$Autodesk.Status == 'Request Expired (Fail)' & sample$Dashboard.Asset.Reviews == 0)),"No Action",sample$new.status)
sample$new.status <- ifelse((sample$Autodesk.Status == 'Final Fail' ||
(sample$Autodesk.Status == 'Request Expired (Fail)' & sample$Dashboard.Asset.Reviews >= 1)),"Fail",sample$new.status)
sample$new.status <- ifelse(sample$Autodesk.Status == 'Null' || sample$Autodesk.Status == 'Fail (Attempts Remaining)'),
sample$new.status <- ''
sample$new.status <- ifelse(sample$Autodesk.Status == "Approved","Pass",sample$new.status)
sample$new.status <- ifelse((sample$Autodesk.Status == 'Request Expired (Null)' ||
(sample$Autodesk.Status == 'Request Expired (Fail)' & sample$Dashboard.Asset.Reviews == 0)),"No Action",sample$new.status)
sample$new.status <- ifelse((sample$Autodesk.Status == 'Final Fail' ||
(sample$Autodesk.Status == 'Request Expired (Fail)' & sample$Dashboard.Asset.Reviews >= 1)),"Fail",sample$new.status)
sample$new.status <- ifelse((sample$Autodesk.Status == 'Null' || sample$Autodesk.Status == 'Fail (Attempts Remaining)'),
"Chance to Verify",sample$new.status)
unique(sample$new.status)
sample$new.status <- ''
sample$new.status <- ifelse(sample$Autodesk.Status == "Approved","Pass",sample$new.status)
sample$new.status <- ifelse((sample$Autodesk.Status == 'Request Expired (Null)' |
(sample$Autodesk.Status == 'Request Expired (Fail)' & sample$Dashboard.Asset.Reviews == 0)),"No Action",sample$new.status)
sample$new.status <- ifelse((sample$Autodesk.Status == 'Final Fail' |
(sample$Autodesk.Status == 'Request Expired (Fail)' & sample$Dashboard.Asset.Reviews >= 1)),"Fail",sample$new.status)
sample$new.status <- ifelse((sample$Autodesk.Status == 'Null' | sample$Autodesk.Status == 'Fail (Attempts Remaining)'),
"Chance to Verify",sample$new.status)
unique(sample$new.status)
tabulate(sample$new.status)
table(sample$new.status)
sample %>%
filter(new.status = "")
filter(sample$new.status = "")
unique(sample$Autodesk.Status)
sample$new.status <- ''
sample$new.status <- ifelse(sample$Autodesk.Status == "Approved","Pass",sample$new.status)
sample$new.status <- ifelse((sample$Autodesk.Status == 'Request Expired (Null)' |
(sample$Autodesk.Status == 'Request Expired (Fail)' & sample$Dashboard.Asset.Reviews == 0)),
"No Action",sample$new.status)
sample$new.status <- ifelse((sample$Autodesk.Status == 'Final fail' |
(sample$Autodesk.Status == 'Request Expired (Fail)' & sample$Dashboard.Asset.Reviews >= 1)),
"Fail",sample$new.status)
sample$new.status <- ifelse((sample$Autodesk.Status == 'Null' | sample$Autodesk.Status == 'Fail (Attempts Remaining)'),
"Chance to Verify",sample$new.status)
unique(sample$new.status)
table(sample$new.status)
install.packages("rjags", dependencies = TRUE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
if (file.exists(".RData")) file.remove(".RData")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
Sys.getenv("PATH")
knitr::opts_chunk$set(echo=T,warning=F)
#install.packages("data.table")
library(data.table)
#install.packages("stargazer")
library(stargazer)
install.packages("rlang")
library(rlang)
install.packages("ggplot2")
library(ggplot2)
find.package("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("devtools")
knitr::opts_chunk$set(echo=T,warning=F)
#install.packages("devtools")
#library(devtools)
#install.packages("data.table")
library(data.table)
#install.packages("stargazer")
library(stargazer)
#install.packages("rlang")
#library(rlang)
#install.packages("ggplot2")
#library(ggplot2)
#install.packages("ggthemes")
#library(ggthemes)
#install.packages("tidyverse")
library(tidyverse)
knitr::opts_chunk$set(echo=T,warning=F)
#install.packages("devtools")
#library(devtools)
#install.packages("data.table")
library(data.table)
#install.packages("stargazer")
library(stargazer)
#install.packages("rlang")
#library(rlang)
#install.packages("ggplot2")
#library(ggplot2)
#install.packages("ggthemes")
#library(ggthemes)
install.packages("tidyverse")
library(tidyverse)
library(rlang)
detach("package:rlang", unload = TRUE)
remove.packages("rlang", lib="~/R/win-library/3.6")
knitr::opts_chunk$set(echo=T,warning=F)
#install.packages("devtools")
#library(devtools)
#install.packages("data.table")
library(data.table)
#install.packages("stargazer")
library(stargazer)
install.packages("rlang")
library(rlang)
install.packages("rlang")
knitr::opts_chunk$set(echo=T,warning=F)
#install.packages("devtools")
#library(devtools)
#install.packages("data.table")
library(data.table)
#install.packages("stargazer")
library(stargazer)
install.packages("rlang")
library(rlang)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("ggthemes")
library(ggthemes)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("pwr")
library(pwr)
#install.packages("plm")
library(plm)
# SET YOUR WORKING DIRECTORY HERE
setwd("/Users/shiri/Dropbox/CMU - 3rd sem/AB Testing/HW 2/")
#clear environment
rm(list=ls());gc()
#load data
WHO.data = fread(input='HW-2.csv', verbose = F)
View(WHO.data)
# count of countries and years
length(factor(WHO.data$COUNTRY))
# count of countries and years
length(levels(WHO.data$COUNTRY))
# count of countries and years
unique(WHO.data$COUNTRY))
# count of countries and years
unique(WHO.data$COUNTRY)
# count of countries and years
length(unique(WHO.data$COUNTRY))
# count of countries and years
length(unique(WHO.data$COUNTRY))
length(unique(WHO.data$YEAR))
# running OLS on composite measure of health care attainment wrt per capita expenditure on health
plm_model <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN,
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "pooling")
# using time dummies
plmtd <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN +
factor(YEAR),
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "pooling")
stargazer(plm_model, plmtd,
se = list(
sqrt(diag(vcovHC(plm_model,
method = "arellano",
type = "HC1"))),
sqrt(diag(vcovHC(plmtd,
method = "arellano",
type = "HC1")))),
title = "Panel OLS",
type = "text",
model.numbers=FALSE,
column.labels=c("without time dummies","with time dummies"),
omit = c("factor[(]YEAR[)]")
)
# running OLS on composite measure of health care attainment wrt per capita expenditure on health
plm_model <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN,
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "pooling")
# using time dummies
plmtd <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN +
factor(YEAR),
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "pooling")
stargazer(plm_model, plmtd,
se = list(
sqrt(diag(vcovHC(plm_model,
method = "arellano",
type = "HC1"))),
sqrt(diag(vcovHC(plmtd,
method = "arellano",
type = "HC1")))),
title = "Panel OLS",
type = "text",
model.numbers=FALSE,
column.labels=c("without time dummies","with time dummies"))#,
#omit = c("factor[(]YEAR[)]")
#)
# running OLS on composite measure of health care attainment wrt per capita expenditure on health
plm_model <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN,
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "pooling")
# using time dummies
plmtd <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN +
factor(YEAR),
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "pooling")
stargazer(plm_model, plmtd,
se = list(
sqrt(diag(vcovHC(plm_model,
method = "arellano",
type = "HC1"))),
sqrt(diag(vcovHC(plmtd,
method = "arellano",
type = "HC1")))),
title = "Panel OLS",
type = "text",
model.numbers=FALSE,
column.labels=c("without time dummies","with time dummies"),
omit = c("factor[(]YEAR[)]")
)
# running OLS on composite measure of health care attainment wrt per capita expenditure on health
plm_model <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN,
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "pooling")
# using time dummies
plmtd <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN +
poly(factor(YEAR), 5),
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "pooling")
# running OLS on composite measure of health care attainment wrt per capita expenditure on health
plm_model <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN,
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "pooling")
# using time dummies
plmtd <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN +
poly(factor(YEAR), 4),
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "pooling")
# running OLS on composite measure of health care attainment wrt per capita expenditure on health
plm_model <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN,
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "pooling")
# using time dummies
plmtd <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN +
poly(factor(YEAR), 5),
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "pooling")
?plm
# running OLS on composite measure of health care attainment wrt per capita expenditure on health
plm_model <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN,
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "pooling")
# using time dummies
plmtd <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN +
factor(YEAR),
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "pooling")
stargazer(plm_model, plmtd,
se = list(
sqrt(diag(vcovHC(plm_model,
method = "arellano",
type = "HC1"))),
sqrt(diag(vcovHC(plmtd,
method = "arellano",
type = "HC1")))),
title = "Panel OLS",
type = "text",
model.numbers=FALSE,
column.labels=c("without time dummies","with time dummies"),
omit = c("factor[(]YEAR[)]")
)
# first-differences
plmtdfd <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN +
factor(YEAR),
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "fd")
plmtdfde <- plm(LCOMP ~ LHEXP + LDALE + LHC + LGDPC + OECD + POPDEN +
factor(YEAR),
data = WHO.data,
index = c("COUNTRY","YEAR"),
model = "within")
stargazer(plmtdfd, plmtdfde,
se = list(
sqrt(diag(vcovHC(plmtdfd,
method = "arellano",
type = "HC1"))),
sqrt(diag(vcovHC(plmtdfde,
method = "arellano",
type = "HC1")))),
title = "Panel OLS",
type = "text",
model.numbers=FALSE,
column.labels=c("first-differences","fixed-effects"),
omit = c("factor[(]YEAR[)]")
)
m <- matrix(sample(c(NA, 1:10), 100, replace = TRUE), 10)
d <- as.data.frame(m)
d
m <- matrix(sample(c(NA, 1:10), 100, replace = TRUE), 10)
d <- as.data.frame(m)
d[is.na(d$V10)] <- 0
d
m <- matrix(sample(c(NA, 1:10), 100, replace = TRUE), 10)
d <- as.data.frame(m)
d
d[is.na(d$V10)] <- 0
d
d$V10[is.na(d$V10)] <- 0
d
library(shiny); runApp('C:/Users/shiri/Dropbox/CMU - 4th sem/R Shiny/hw2-shirishv/hw2-shirishv.R')
runApp('C:/Users/shiri/Dropbox/CMU - 4th sem/R Shiny/hw2-shirishv/hw2-shirishv.R')
setwd("C:/Users/shiri/Dropbox/CMU - 4th sem/R Shiny/hw2-shirishv")
runApp('hw2-shirishv.R')
library(shiny); runApp('hw2-shirishv.R')
setwd("~/")
setwd("C:/Users/shiri/Dropbox/CMU - 4th sem/R Shiny/hw2-shirishv")
runApp('hw2-shirishv.R')
